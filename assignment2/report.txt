Q1
Transition System Defination
S_{max} = \langle X, X^o, U, \to, Y, h \rangle
1. We define the output state as X = A x B x B
2. A = N
3. B = Z
4. Input space = A
5. \rho(x) = \langle x, 0, 0 \rangle
6. Hence, X^o  = \rho(n) = (n,0,0)
7. U = {next}
8. (n,a,b) \to (n-1,a+b,a) if a !=0 else if n !=0 and a==0, (n,a,b) \to (n-1,1,0)
9. Y = b
10. h: X \to Y 


Program

begin src

datatype StateSpace = StateSpace(i: int,a: int, b: int)
function method fibb(n: int): int
decreases n
requires n>=0
{
if n <= 0 then 0 else if n == 1 then 1 else fibb(n-1)+fibb(n-2)
}

method FibonacciTransitions(initialState: StateSpace) returns (finalState: StateSpace)
// pre conditions
requires initialState.i >= 0
requires initialState.a == 0
//post condition
ensures finalState.i == 0
ensures finalState.a >= 1 ==> initialState.i >= 1
ensures initialState.i >= 1 ==> finalState.a >= 1
ensures initialState.i == 0 ==> finalState.a == 0
ensures initialState.i == 1 ==> finalState.a == 1
ensures initialState.i >=1 ==> finalState.b == fibb(initialState.i-1)
ensures finalState.a == fibb(initialState.i)
ensures finalState.a >= finalState.b
{
var n := initialState.i;
var i: int := n;
var a := 0;
var b := 1;
var c := a+b;

if i == 0 {
return StateSpace(0,0,0);
}
else if i == 1 {
return StateSpace(0,1,0);
}
else{
//n := n-2;
i := n-1;
while i >= 1
// loop invariance
decreases i
invariant 0 <= i <= n-1
invariant c == b
invariant c == fibb(n-i)
invariant a == fibb(n-i-1)
invariant b == fibb(n-i)
invariant c-a >= 0
{
c := a+b;
a := b;
b := c;
i := i-1;
}
return StateSpace(i,c,a);
}
}


function method rho(n: int): StateSpace
{
StateSpace(n,0,0)
}
function method pi(state: StateSpace): int
{
state.a
}

method Main()
{
var initialState := rho(6);
var terminalState := FibonacciTransitions(initialState);
var c:= pi(terminalState); 
assert c == fibb(6);
}

end src

Pre condition
requires initialState.i >= 0
requires initialState.a == 0

Post condition
ensures finalState.i == 0
ensures finalState.a >= 1 ==> initialState.i >= 1
ensures initialState.i >= 1 ==> finalState.a >= 1
ensures initialState.i == 0 ==> finalState.a == 0
ensures initialState.i == 1 ==> finalState.a == 1
ensures initialState.i >=1 ==> finalState.b == fibb(initialState.i-1)
ensures finalState.a == fibb(initialState.i)
ensures finalState.a >= finalState.b


Q2
Transition System
S_{max} = \langle X, X^o, U, \to, Y, h \rangle
1. We define the output state as X = A x B x B
2. A = N
3. B = Z
4. Input space = A
5. \rho(x) = \langle x, 0, 0 \rangle
6. Hence, X^o  = \rho(n) = (n,0,0)
7. U = {next}
8. (n,a,b) \to (n-1,a+b,a) if a !=0 else if n !=0 and a==0, (n,a,b) \to (n-1,1,0)
9. Y = b
10. h: X \to Y 
datatype StateSpace = StateSpace(i: int,a: int, b: int, n:int)
function method fibb(n: int): int
decreases n
requires n>=0
{
if n <= 0 then 0 else if n == 1 then 1 else fibb(n-1)+fibb(n-2)
}

method FibonacciTransitions(initialState: StateSpace) returns (finalState: StateSpace)
decreases initialState.i
requires initialState.n>=0
requires initialState.i >=0
{
    if initialState.n == 0{
        return StateSpace(0,0,0,initialState.n);
    }
    else if initialState.i <= 2 {
        // print "\ntest2\n";
        // print initialState;

        return StateSpace(0,initialState.a+initialState.b,initialState.a,initialState.n);
    }
    else{
        // print "\ntest\n";
        // print initialState;
        var s:= FibonacciTransitions(StateSpace(initialState.i-1,initialState.a+initialState.b,initialState.a,initialState.n));
        return s;
    } 
}


function method rho(n: int): StateSpace
{
StateSpace(n,1,0,n)
}
function method pi(state: StateSpace): int
{
state.a
}

method Main()
{
    var n:=5;
var initialState := rho(n);
var terminalState := FibonacciTransitions(initialState);
var c:= pi(terminalState);
// print c;
// print '\n';
// print fibb(n);
assert c == fibb(n);
}

Pre condition
requires initialState.n>=0
requires initialState.i >=0
requires initialState.n>=2 ==> initialState.a == fibb(initialState.n - initialState.i+1)
requires initialState.n>=2==> initialState.b == fibb(initialState.n - initialState.i)

Post condition
ensures initialState.n>=2 ==> finalState.a == fibb(initialState.n - initialState.i+2)
ensures initialState.n>=2 ==> finalState.b == fibb(initialState.n - initialState.i+1)

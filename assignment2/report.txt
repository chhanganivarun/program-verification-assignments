Q1
Transition System Defination
S_{max} = \langle X, X^o, U, \to, Y, h \rangle
1. We define the output state as X = A x B x B
2. A = N
3. B = Z
4. Input space = A
5. \rho(x) = \langle x, 0, 0 \rangle
6. Hence, X^o  = \rho(n) = (n,0,0)
7. U = {next}
8. (n,a,b) \to (n-1,a+b,a) if a !=0 else if n !=0 and a==0, (n,a,b) \to (n-1,1,0)
9. Y = b
10. h: X \to Y 


Program

begin src

datatype StateSpace = StateSpace(i: int,a: int, b: int)
function method fibb(n: int): int
decreases n
requires n>=0
{
if n <= 0 then 0 else if n == 1 then 1 else fibb(n-1)+fibb(n-2)
}

method FibonacciTransitions(initialState: StateSpace) returns (finalState: StateSpace)
// pre conditions
requires initialState.i >= 0
requires initialState.a == 0
//post condition
ensures finalState.i == 0
ensures finalState.a >= 1 ==> initialState.i >= 1
ensures initialState.i >= 1 ==> finalState.a >= 1
ensures initialState.i == 0 ==> finalState.a == 0
ensures initialState.i == 1 ==> finalState.a == 1
ensures initialState.i >=1 ==> finalState.b == fibb(initialState.i-1)
ensures finalState.a == fibb(initialState.i)
ensures finalState.a >= finalState.b
{
var n := initialState.i;
var i: int := n;
var a := 0;
var b := 1;
var c := a+b;

if i == 0 {
return StateSpace(0,0,0);
}
else if i == 1 {
return StateSpace(0,1,0);
}
else{
//n := n-2;
i := n-1;
while i >= 1
// loop invariance
decreases i
invariant 0 <= i <= n-1
invariant c == b
invariant c == fibb(n-i)
invariant a == fibb(n-i-1)
invariant b == fibb(n-i)
invariant c-a >= 0
{
c := a+b;
a := b;
b := c;
i := i-1;
}
return StateSpace(i,c,a);
}
}


function method rho(n: int): StateSpace
{
StateSpace(n,0,0)
}
function method pi(state: StateSpace): int
{
state.a
}

method Main()
{
var initialState := rho(6);
var terminalState := FibonacciTransitions(initialState);
var c:= pi(terminalState); 
assert c == fibb(6);
}

end src

Pre condition
requires initialState.i >= 0
requires initialState.a == 0

Post condition
ensures finalState.i == 0
ensures finalState.a >= 1 ==> initialState.i >= 1
ensures initialState.i >= 1 ==> finalState.a >= 1
ensures initialState.i == 0 ==> finalState.a == 0
ensures initialState.i == 1 ==> finalState.a == 1
ensures initialState.i >=1 ==> finalState.b == fibb(initialState.i-1)
ensures finalState.a == fibb(initialState.i)
ensures finalState.a >= finalState.b


Q2
Transition System
S_{max} = \langle X, X^o, U, \to, Y, h \rangle
1. We define the output state as X = A x B x B
2. A = N
3. B = Z
4. Input space = A
5. \rho(x) = \langle x, 0, 0 \rangle
6. Hence, X^o  = \rho(n) = (n,0,0)
7. U = {next}
8. (n,a,b) \to (n-1,a+b,a) if a !=0 else if n !=0 and a==0, (n,a,b) \to (n-1,1,0)
9. Y = b
10. h: X \to Y 

Program

begin src
datatype StateSpace = StateSpace(i: int,a: int, b: int, n:int)
function method fibb(n: int): int
decreases n
requires n>=0
{
if n <= 0 then 0 else if n == 1 then 1 else fibb(n-1)+fibb(n-2)
}

method FibonacciTransitions(initialState: StateSpace) returns (finalState: StateSpace)
decreases initialState.i
requires initialState.n>=0
requires initialState.i >=0
{
    if initialState.n == 0{
        return StateSpace(0,0,0,initialState.n);
    }
    else if initialState.i <= 2 {
        // print "\ntest2\n";
        // print initialState;

        return StateSpace(0,initialState.a+initialState.b,initialState.a,initialState.n);
    }
    else{
        // print "\ntest\n";
        // print initialState;
        var s:= FibonacciTransitions(StateSpace(initialState.i-1,initialState.a+initialState.b,initialState.a,initialState.n));
        return s;
    } 
}


function method rho(n: int): StateSpace
{
StateSpace(n,1,0,n)
}
function method pi(state: StateSpace): int
{
state.a
}

method Main()
{
    var n:=5;
var initialState := rho(n);
var terminalState := FibonacciTransitions(initialState);
var c:= pi(terminalState);
// print c;
// print '\n';
// print fibb(n);
assert c == fibb(n);
}

end src


Pre condition
requires initialState.n>=0
requires initialState.i >=0
requires initialState.n>=2 ==> initialState.a == fibb(initialState.n - initialState.i+1)
requires initialState.n>=2==> initialState.b == fibb(initialState.n - initialState.i)

Post condition
ensures initialState.n>=2 ==> finalState.a == fibb(initialState.n - initialState.i+2)
ensures initialState.n>=2 ==> finalState.b == fibb(initialState.n - initialState.i+1)

Q3
Transition System Defination
S_{max} = \langle X, X^o, U, \to, Y, h \rangle
1. Input Space = R^n
2. State Space = R^n x Z
3. rho(x) = (x,n-1) where x \in R^n
4. X = R^n x Z
5. X^o = rho(A)
6. U = {next}
7. (x,a) \to (x',b) where, b = a-1 if a>0 else b = a; \forall b<i<n, x'[i]<x'[i+1]


Program
begin src
datatype StateSpace = StateSpace(arr: array<int>,sf: int)


predicate sorted(a: array<int>, l: int, u: int)
reads a
{
    forall i, j :: 0 <= l <= i <= j <= u < a.Length ==> a[i] <= a[j]
}

function method rho(arr: array<int>): StateSpace
{
    StateSpace(arr,arr.Length-1)
}

function method pi(state: StateSpace): array<int>
{
    state.arr
}

method SortTransitions(initialState: StateSpace) returns (finalState: StateSpace)
decreases initialState.sf
requires 0<=initialState.sf <=initialState.arr.Length-1
requires initialState.arr.Length >=2
requires sorted(initialState.arr,initialState.sf,initialState.arr.Length-1)

ensures finalState.sf < finalState.arr.Length-1
ensures finalState.sf+1 < finalState.arr.Length
ensures 0<=finalState.sf<=initialState.arr.Length-1
ensures initialState.sf == initialState.arr.Length-1 ==> finalState.sf<initialState.sf
ensures initialState.sf <= finalState.arr.Length-1
ensures finalState.arr.Length == initialState.arr.Length
ensures finalState.sf<=initialState.sf<=finalState.arr.Length-1
{
    if initialState.sf<1
    {
        return initialState;
    }
    var a:=new int[initialState.arr.Length];
    var i:=0;
    while i<initialState.arr.Length
    decreases initialState.arr.Length -i
    invariant 0<=i<=initialState.arr.Length
    {
        a[i]  := initialState.arr[i];
        i:=i+1;
    }
    var sf := initialState.sf;
    while sf>0
    decreases sf
    invariant 0<=sf<=initialState.sf
    // invariant sorted(a,sf,a.Length-1)
    {
    i := 0;
    while i<sf
    decreases sf-i
    invariant 0<=i<=sf
    
    {
        if a[i] > a[i+1]
        {
            a[i],a[i+1] := a[i+1],a[i];
        }
        i:=i+1;
    }
    sf:=sf-1;
    }
    var s:= StateSpace(a,initialState.sf-1);
    return s;
}
method Main()
{
    var a := new int[5];
  a[0], a[1], a[2], a[3], a[4] := 9, 4, 6, 3, 8;
  var initialState:= rho(a);
  var terminalState := SortTransitions(initialState);
  var b:= pi(terminalState);
  var c:=new int[a.Length];
  c[0],c[1],c[2],c[3],c[4] := 3,4,6,8,9;
  var k := 0;
  
  while(k < a.Length) 
  decreases a.Length-k
  invariant 0<=k<=c.Length
  invariant 0<=k<=b.Length
  {
    print b[k], "\n"; k := k+1;
    // assert c[k] == b[k];
  }
  
}
end src

Pre condition:
requires 0<=initialState.sf <=initialState.arr.Length-1
requires initialState.arr.Length >=2
requires sorted(initialState.arr,initialState.sf,initialState.arr.Length-1)

Post condition:
ensures sorted(finalState.arr,finalState.sf,finalState.arr.Length-1)
ensures finalState.sf < finalState.arr.Length-1
ensures finalState.sf+1 < finalState.arr.Length
ensures 0<=finalState.sf<=initialState.arr.Length-1
ensures initialState.sf == initialState.arr.Length-1 ==> finalState.sf<initialState.sf
ensures finalState.arr[initialState.sf] <= initialState.arr[initialState.sf]
ensures initialState.sf <= finalState.arr.Length-1
ensures finalState.arr.Length == initialState.arr.Length
ensures finalState.sf<=initialState.sf<=finalState.arr.Length-1
